use super::{WIDTH, HEIGHT};

use std::sync::mpsc::{Sender, channel, Receiver, TryRecvError};

#[derive(Debug)]
pub struct FrameBuf {
    pub(super) buf: [[u8; WIDTH as usize]; HEIGHT as usize],
    // format is 0x00_rrggbb
    pub(super) palette: [u32; 256],
    cable: Receiver<Draw>,
}

pub const DEFAULT_8BIT_PALETTE: [u32; 256] = [
    // r: 000
    0x000000, 0x000055, 0x0000aa, 0x0000ff, 0x002400, 0x002455, 0x0024aa, 0x0024ff, 0x004800, 0x004855, 0x0048aa, 0x0048ff, 0x006d00, 0x006d55, 0x006daa, 0x006dff, 0x009100, 0x009155, 0x0091aa, 0x0091ff, 0x00b600, 0x00b655, 0x00b6aa, 0x00b6ff, 0x00da00, 0x00da55, 0x00daaa, 0x00daff, 0x00da00, 0x00da55, 0x00daaa, 0x00daff,
    // r: 001 = x24
    0x240000, 0x240055, 0x2400aa, 0x2400ff, 0x242400, 0x242455, 0x2424aa, 0x2424ff, 0x244800, 0x244855, 0x2448aa, 0x2448ff, 0x246d00, 0x246d55, 0x246daa, 0x246dff, 0x249100, 0x249155, 0x2491aa, 0x2491ff, 0x24b600, 0x24b655, 0x24b6aa, 0x24b6ff, 0x24da00, 0x24da55, 0x24daaa, 0x24daff, 0x24da00, 0x24da55, 0x24daaa, 0x24daff,
    // r: 010 = x48
    0x480000, 0x480055, 0x4800aa, 0x4800ff, 0x482400, 0x482455, 0x4824aa, 0x4824ff, 0x484800, 0x484855, 0x4848aa, 0x4848ff, 0x486d00, 0x486d55, 0x486daa, 0x486dff, 0x489100, 0x489155, 0x4891aa, 0x4891ff, 0x48b600, 0x48b655, 0x48b6aa, 0x48b6ff, 0x48da00, 0x48da55, 0x48daaa, 0x48daff, 0x48da00, 0x48da55, 0x48daaa, 0x48daff,
    // r: 011 = x6d
    0x6d0000, 0x6d0055, 0x6d00aa, 0x6d00ff, 0x6d2400, 0x6d2455, 0x6d24aa, 0x6d24ff, 0x6d4800, 0x6d4855, 0x6d48aa, 0x6d48ff, 0x6d6d00, 0x6d6d55, 0x6d6daa, 0x6d6dff, 0x6d9100, 0x6d9155, 0x6d91aa, 0x6d91ff, 0x6db600, 0x6db655, 0x6db6aa, 0x6db6ff, 0x6dda00, 0x6dda55, 0x6ddaaa, 0x6ddaff, 0x6dda00, 0x6dda55, 0x6ddaaa, 0x6ddaff,
    // r: 100 = x91
    0x910000, 0x910055, 0x9100aa, 0x9100ff, 0x912400, 0x912455, 0x9124aa, 0x9124ff, 0x914800, 0x914855, 0x9148aa, 0x9148ff, 0x916d00, 0x916d55, 0x916daa, 0x916dff, 0x919100, 0x919155, 0x9191aa, 0x9191ff, 0x91b600, 0x91b655, 0x91b6aa, 0x91b6ff, 0x91da00, 0x91da55, 0x91daaa, 0x91daff, 0x91da00, 0x91da55, 0x91daaa, 0x91daff,
    // r: 101 = xb6
    0xb60000, 0xb60055, 0xb600aa, 0xb600ff, 0xb62400, 0xb62455, 0xb624aa, 0xb624ff, 0xb64800, 0xb64855, 0xb648aa, 0xb648ff, 0xb66d00, 0xb66d55, 0xb66daa, 0xb66dff, 0xb69100, 0xb69155, 0xb691aa, 0xb691ff, 0xb6b600, 0xb6b655, 0xb6b6aa, 0xb6b6ff, 0xb6da00, 0xb6da55, 0xb6daaa, 0xb6daff, 0xb6da00, 0xb6da55, 0xb6daaa, 0xb6daff,
    // r: 110 = xda
    0xda0000, 0xda0055, 0xda00aa, 0xda00ff, 0xda2400, 0xda2455, 0xda24aa, 0xda24ff, 0xda4800, 0xda4855, 0xda48aa, 0xda48ff, 0xda6d00, 0xda6d55, 0xda6daa, 0xda6dff, 0xda9100, 0xda9155, 0xda91aa, 0xda91ff, 0xdab600, 0xdab655, 0xdab6aa, 0xdab6ff, 0xdada00, 0xdada55, 0xdadaaa, 0xdadaff, 0xdada00, 0xdada55, 0xdadaaa, 0xdadaff,
    // r: 111 = xff
    0xff0000, 0xff0055, 0xff00aa, 0xff00ff, 0xff2400, 0xff2455, 0xff24aa, 0xff24ff, 0xff4800, 0xff4855, 0xff48aa, 0xff48ff, 0xff6d00, 0xff6d55, 0xff6daa, 0xff6dff, 0xff9100, 0xff9155, 0xff91aa, 0xff91ff, 0xffb600, 0xffb655, 0xffb6aa, 0xffb6ff, 0xffda00, 0xffda55, 0xffdaaa, 0xffdaff, 0xffda00, 0xffda55, 0xffdaaa, 0xffdaff,
];

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Draw {
    pub x: u16,
    pub y: u16,
    pub c: u8,
}

impl FrameBuf {
    pub fn new() -> (Self, Sender<Draw>) {
        let (sx, rx) = channel();
        let frame_buf = Self {
            buf: [[0; WIDTH as usize]; HEIGHT as usize],
            palette: DEFAULT_8BIT_PALETTE,
            cable: rx,
        };
        (frame_buf, sx)
    }
    /// Returns false if the power is off
    pub fn handle(&mut self) -> Result<bool, ()> {
        let mut any_drawn = false;
        loop {
            match self.cable.try_recv() {
                Ok(Draw { x, y, c }) => self.draw(x, y, c),
                Err(TryRecvError::Empty) => break Ok(any_drawn),
                Err(TryRecvError::Disconnected) => break Err(()),
            }
            any_drawn = true;
        }
    }

    #[inline(always)]
    pub fn draw(&mut self, x: u16, y: u16, c: u8) {
        let Some(p) = self.buf
            .get_mut(y as usize)
            .and_then(|r| r.get_mut(x as usize))
        else { return; };
        *p = c;
    }
}
